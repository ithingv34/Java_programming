(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{290:function(t,s,a){"use strict";a.r(s);var n=a(13),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"연산자"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#연산자"}},[t._v("#")]),t._v(" 연산자")]),t._v(" "),s("ul",[s("li",[t._v("부호/증감 연산자")]),t._v(" "),s("li",[t._v("산술 연산자")]),t._v(" "),s("li",[t._v("오버플로우 언더플로우")]),t._v(" "),s("li",[t._v("정확한 계산이 필요하다면 실수 연산 대신 정수 연산으로")]),t._v(" "),s("li",[t._v("나눗셈 연산 후 "),s("code",[t._v("Nan")]),t._v("과 "),s("code",[t._v("Infinity")]),t._v(" 처리")]),t._v(" "),s("li",[t._v("비교연산자")]),t._v(" "),s("li",[t._v("논리연산자")]),t._v(" "),s("li",[t._v("삼항연산자")])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"부호-증감-연산자"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#부호-증감-연산자"}},[t._v("#")]),t._v(" 부호/증감 연산자")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("-")]),t._v(" 연산자는 변수값의 부호를 변경할 때 사용된다. 주의할 점은 부호 변경 후의 타입이다. 컴파일 에러가 발생할 수 있다.")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 컴파일 에러")]),t._v("\n")])])]),s("ul",[s("li",[t._v("정수 타입 (byte, short, int) 연산의 결과는 int 타입이고 부호를 변경하는 것도 연산이므로 다음과 같이 int 타입 변수에 대입해야한다.")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ninrt result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("hr"),t._v(" "),s("h3",{attrs:{id:"산술연산자"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#산술연산자"}},[t._v("#")]),t._v(" 산술연산자")]),t._v(" "),s("ul",[s("li",[t._v("피 연산자가 정수 타입(byte, short, int, char) 이면 연산 결과는 int 타입이다.")]),t._v(" "),s("li",[t._v("피 연산자가 정수 타입이고 그 중 하나가 long 타입이면 연산의 결과는 long 타입이다.")]),t._v(" "),s("li",[t._v("피 연산자 중 하나가 실수 타입이면 연산 결과는 실수 타입이다.")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" v1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" v2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" v3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" v4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10L")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// byte + byte")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" result1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" v2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// int 타입으로 자동 변환 후 연산")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// byte + byte - long")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" result2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" v2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" v4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// long 타입으로 자동 변환 후 연산")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (double) byte / byte")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" result3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" v1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" v2 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2.5")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// % 연산")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" result4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" v2 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n")])])]),s("hr"),t._v(" "),s("h3",{attrs:{id:"오버플로우-언더플로우"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#오버플로우-언더플로우"}},[t._v("#")]),t._v(" 오버플로우, 언더플로우")]),t._v(" "),s("p",[s("code",[t._v("오버플로우")]),t._v("란 타입이 허용하는 최대값을 벗어나는 것을 말하며 "),s("code",[t._v("언더플로우")]),t._v("는 최소값을 벗어나는 것을 말한다. 정수 타입 연산에서 오버플로우/언더플로우가 발생하면 실행 에러가 발생하지 않고 해당 정수 타입의 최소값 또는 최대값으로 되돌아간다.")]),t._v(" "),s("ul",[s("li",[t._v("연산 과정 중 발생하는 오버플로우/언더플로우는 기대하는 값이 아니기 때문에 항상 해당 타입의 범위 내에서 연산이 수행되도록 신경써야한다.")]),t._v(" "),s("li",[t._v("int 타입에서 오버플로우가 발생할 가능성이 있다면 long으로 타입을 변경해야한다.")])]),t._v(" "),s("p",[s("strong",[s("code",[t._v("byte")]),t._v(" 타입일 경우 최대값인 127에서 1을 더해 오버플로우가 발생하면 최소값인 -128이 된다. 반댁로 언더플로우가 발생하면 결과는 최대값인 127이 된다.")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" val "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("127")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nval"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 127 + 1 -> overflow --\x3e -128")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" val2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nval"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -128 - 1 -> underflow --\x3e 127")]),t._v("\n")])])]),s("hr"),t._v(" "),s("h3",{attrs:{id:"정확한-계산은-정수-연산으로-하자"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#정확한-계산은-정수-연산으로-하자"}},[t._v("#")]),t._v(" 정확한 계산은 정수 연산으로 하자")]),t._v(" "),s("ul",[s("li",[t._v("산술 연산을 정확하게 계산하고 싶다면 "),s("strong",[t._v("실수 타입을 사용하지 않는 것이 좋다")])])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" apple "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" priceUnit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" apple "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" priceUnit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 출력 결과 result의 값은 정확히 3이 되지 않는다. 이것은 부동 소수점 방식을 사용하는 실수 타입에서 흔히 발생한다.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0.299999999999999993")]),t._v("\n")])])]),s("p",[s("strong",[t._v("정확한 계산이 필요하다면 정수 연산으로 계산하자")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" apple "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" totalPrices "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" apple "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" totalPrices "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n")])])]),s("hr"),t._v(" "),s("h3",{attrs:{id:"나눗셈-연산-후-nan과-infinity-처리"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#나눗셈-연산-후-nan과-infinity-처리"}},[t._v("#")]),t._v(" 나눗셈 연산 후 "),s("code",[t._v("Nan")]),t._v("과 "),s("code",[t._v("Infinity")]),t._v(" 처리")]),t._v(" "),s("ul",[s("li",[t._v("나눗셈 (/) 또는 나머지 (%) 연산에서 좌측 피연산자가 정수이고 우측 피연산자가 0일 경우 예외(ArithmeticException)가 발생한다.")]),t._v(" "),s("li",[t._v("무한대의 값은 정수로 표현할 수 없다.")]),t._v(" "),s("li",[s("code",[t._v("Infinity")]),t._v(" 혹은 "),s("code",[t._v("NaN")]),t._v("인 상태에서 연산을 계속하면 안된다.")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//에러")]),t._v("\n")])])]),s("p",[t._v("**좌측 피 연산자가 실수이거나 우측 피연산자가 0.0 또는 0.0f이면 예외가 발생하지 않고 연산의 결과는 "),s("code",[t._v("Infinity")]),t._v(" 또는 "),s("code",[t._v("NaN(Not a Number)")]),t._v("가 된다.")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 우측 피연산자가 0.0인 경우")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Infinity")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Nan")]),t._v("\n")])])]),s("p",[t._v("** "),s("code",[t._v("/")]),t._v(" 혹은 "),s("code",[t._v("%")]),t._v(" 결과가 "),s("code",[t._v("Infinity")]),t._v(" 인지 "),s("code",[t._v("NaN")]),t._v(" 인지 먼저 확인하고 다음 연산을 수행하는 것이 좋다**")]),t._v(" "),s("ul",[s("li",[t._v("확인을 위해 "),s("code",[t._v("Double.isInifnite()")]),t._v(" 와 "),s("code",[t._v("Double.isNaN()")]),t._v(" 을 사용하며 참이면 true 거짓이면 false를 리턴한다.")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" z "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Infinity")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isInfinite")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"값 산출 불가"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("z "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 값 산출 불가")]),t._v("\n")])])]),s("hr"),t._v(" "),s("h3",{attrs:{id:"비교연산자"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#비교연산자"}},[t._v("#")]),t._v(" 비교연산자")]),t._v(" "),s("ul",[s("li",[t._v("피연산자의 타입이 다를 경우 비교 연산을 수행하기 위해 타입을 일치시킨다.")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'A'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1f")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1f")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),s("ul",[s("li",[t._v("문자열을 비교할 때 동등 연산자 대신 "),s("code",[t._v("equals()")]),t._v("와 "),s("code",[t._v("!equals()")]),t._v("를 사용한다.")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 문자열이 같은지 검사")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("str1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("euqlas")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 문자열이 다른지 검사")]),t._v("\n")])])]),s("hr"),t._v(" "),s("h3",{attrs:{id:"논리연산자"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#논리연산자"}},[t._v("#")]),t._v(" 논리연산자")]),t._v(" "),s("p",[t._v("논리곱(&&), 논리합(||), 배타적 논리합(^), 논리부정(!) 연산을 수행하는 연산자")]),t._v(" "),s("ul",[s("li",[t._v("AND (&& 혹은 &) : 피연사자 모두가 true일 경우에만 연산 결과가 true")]),t._v(" "),s("li",[t._v("OR (|| 또는 |) : 피연산자 중 하나만 true이면 연산 결과는 true")]),t._v(" "),s("li",[t._v("XOR (^) : 피연산자 중 하나가 true이고 다른 하나가 false인 경우")]),t._v(" "),s("li",[t._v("NOT (! : 피연산자의 논리값을 바꿈")])]),t._v(" "),s("p",[s("strong",[t._v("&&과 &은 산출 결과는 같지만 연산 과정이 조금 다르다(||도 마찬가지)")])]),t._v(" "),s("ul",[s("li",[t._v("&&는 앞의 피연산자가 false라면 뒤의 피연산자를 평가하지 않고 false를 산출한다.")]),t._v(" "),s("li",[t._v("&는 두 피연산자 모두를 평가해서 산출 결과를 낸다.\n-> &&가 조금 더 효율적으로 동작한다.")])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"삼항연산자"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#삼항연산자"}},[t._v("#")]),t._v(" 삼항연산자")]),t._v(" "),s("p",[t._v("삼항 연산자는 (피연산자? 피연산자 : 피연산자)는 총 3개의 피연산자를 가진다.")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("조건식(피연산자1) ? : 값 또는 연산식(피연산자2) : 값 또는 연산식(피연산자3)")])])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" score "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("85")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" grade "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("score "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("90")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'A'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("score "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'B'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'C'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);